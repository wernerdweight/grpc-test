// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ovm.proto

package ovm

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Booze int32

const (
	Booze_BECHER  Booze = 0
	Booze_FERNET  Booze = 1
	Booze_JELINEK Booze = 2
	Booze_VIROZA  Booze = 3
)

var Booze_name = map[int32]string{
	0: "BECHER",
	1: "FERNET",
	2: "JELINEK",
	3: "VIROZA",
}

var Booze_value = map[string]int32{
	"BECHER":  0,
	"FERNET":  1,
	"JELINEK": 2,
	"VIROZA":  3,
}

func (x Booze) String() string {
	return proto.EnumName(Booze_name, int32(x))
}

func (Booze) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9e0de0875e5918e, []int{0}
}

type Sport int32

const (
	Sport_TENNIS Sport = 0
	Sport_SKI    Sport = 1
	Sport_F1     Sport = 2
	Sport_EGO    Sport = 3
)

var Sport_name = map[int32]string{
	0: "TENNIS",
	1: "SKI",
	2: "F1",
	3: "EGO",
}

var Sport_value = map[string]int32{
	"TENNIS": 0,
	"SKI":    1,
	"F1":     2,
	"EGO":    3,
}

func (x Sport) String() string {
	return proto.EnumName(Sport_name, int32(x))
}

func (Sport) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9e0de0875e5918e, []int{1}
}

type Mood int32

const (
	Mood_GOOD                   Mood = 0
	Mood_NOT_GREAT_NOT_TERRIBLE Mood = 2
	Mood_BAD                    Mood = 3
	Mood_NOT_THIS_SHIT_AGAIN    Mood = 4
)

var Mood_name = map[int32]string{
	0: "GOOD",
	2: "NOT_GREAT_NOT_TERRIBLE",
	3: "BAD",
	4: "NOT_THIS_SHIT_AGAIN",
}

var Mood_value = map[string]int32{
	"GOOD":                   0,
	"NOT_GREAT_NOT_TERRIBLE": 2,
	"BAD":                    3,
	"NOT_THIS_SHIT_AGAIN":    4,
}

func (x Mood) String() string {
	return proto.EnumName(Mood_name, int32(x))
}

func (Mood) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b9e0de0875e5918e, []int{2}
}

type MoravecRequest struct {
	Mood                 Mood     `protobuf:"varint,1,opt,name=mood,proto3,enum=ovm.Mood" json:"mood,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MoravecRequest) Reset()         { *m = MoravecRequest{} }
func (m *MoravecRequest) String() string { return proto.CompactTextString(m) }
func (*MoravecRequest) ProtoMessage()    {}
func (*MoravecRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e0de0875e5918e, []int{0}
}

func (m *MoravecRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MoravecRequest.Unmarshal(m, b)
}
func (m *MoravecRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MoravecRequest.Marshal(b, m, deterministic)
}
func (m *MoravecRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MoravecRequest.Merge(m, src)
}
func (m *MoravecRequest) XXX_Size() int {
	return xxx_messageInfo_MoravecRequest.Size(m)
}
func (m *MoravecRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MoravecRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MoravecRequest proto.InternalMessageInfo

func (m *MoravecRequest) GetMood() Mood {
	if m != nil {
		return m.Mood
	}
	return Mood_GOOD
}

type KlausRequest struct {
	Mood                 Mood     `protobuf:"varint,1,opt,name=mood,proto3,enum=ovm.Mood" json:"mood,omitempty"`
	Sport                Sport    `protobuf:"varint,2,opt,name=sport,proto3,enum=ovm.Sport" json:"sport,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KlausRequest) Reset()         { *m = KlausRequest{} }
func (m *KlausRequest) String() string { return proto.CompactTextString(m) }
func (*KlausRequest) ProtoMessage()    {}
func (*KlausRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e0de0875e5918e, []int{1}
}

func (m *KlausRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KlausRequest.Unmarshal(m, b)
}
func (m *KlausRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KlausRequest.Marshal(b, m, deterministic)
}
func (m *KlausRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KlausRequest.Merge(m, src)
}
func (m *KlausRequest) XXX_Size() int {
	return xxx_messageInfo_KlausRequest.Size(m)
}
func (m *KlausRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_KlausRequest.DiscardUnknown(m)
}

var xxx_messageInfo_KlausRequest proto.InternalMessageInfo

func (m *KlausRequest) GetMood() Mood {
	if m != nil {
		return m.Mood
	}
	return Mood_GOOD
}

func (m *KlausRequest) GetSport() Sport {
	if m != nil {
		return m.Sport
	}
	return Sport_TENNIS
}

type ZemanRequest struct {
	Mood                 Mood     `protobuf:"varint,1,opt,name=mood,proto3,enum=ovm.Mood" json:"mood,omitempty"`
	Booze                Booze    `protobuf:"varint,2,opt,name=booze,proto3,enum=ovm.Booze" json:"booze,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ZemanRequest) Reset()         { *m = ZemanRequest{} }
func (m *ZemanRequest) String() string { return proto.CompactTextString(m) }
func (*ZemanRequest) ProtoMessage()    {}
func (*ZemanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e0de0875e5918e, []int{2}
}

func (m *ZemanRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ZemanRequest.Unmarshal(m, b)
}
func (m *ZemanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ZemanRequest.Marshal(b, m, deterministic)
}
func (m *ZemanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZemanRequest.Merge(m, src)
}
func (m *ZemanRequest) XXX_Size() int {
	return xxx_messageInfo_ZemanRequest.Size(m)
}
func (m *ZemanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ZemanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ZemanRequest proto.InternalMessageInfo

func (m *ZemanRequest) GetMood() Mood {
	if m != nil {
		return m.Mood
	}
	return Mood_GOOD
}

func (m *ZemanRequest) GetBooze() Booze {
	if m != nil {
		return m.Booze
	}
	return Booze_BECHER
}

type Response struct {
	Sentences            []*Sentence `protobuf:"bytes,1,rep,name=sentences,proto3" json:"sentences,omitempty"`
	Score                int32       `protobuf:"varint,2,opt,name=score,proto3" json:"score,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e0de0875e5918e, []int{3}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSentences() []*Sentence {
	if m != nil {
		return m.Sentences
	}
	return nil
}

func (m *Response) GetScore() int32 {
	if m != nil {
		return m.Score
	}
	return 0
}

type Sentence struct {
	Text                 string   `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sentence) Reset()         { *m = Sentence{} }
func (m *Sentence) String() string { return proto.CompactTextString(m) }
func (*Sentence) ProtoMessage()    {}
func (*Sentence) Descriptor() ([]byte, []int) {
	return fileDescriptor_b9e0de0875e5918e, []int{4}
}

func (m *Sentence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sentence.Unmarshal(m, b)
}
func (m *Sentence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sentence.Marshal(b, m, deterministic)
}
func (m *Sentence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sentence.Merge(m, src)
}
func (m *Sentence) XXX_Size() int {
	return xxx_messageInfo_Sentence.Size(m)
}
func (m *Sentence) XXX_DiscardUnknown() {
	xxx_messageInfo_Sentence.DiscardUnknown(m)
}

var xxx_messageInfo_Sentence proto.InternalMessageInfo

func (m *Sentence) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

func init() {
	proto.RegisterEnum("ovm.Booze", Booze_name, Booze_value)
	proto.RegisterEnum("ovm.Sport", Sport_name, Sport_value)
	proto.RegisterEnum("ovm.Mood", Mood_name, Mood_value)
	proto.RegisterType((*MoravecRequest)(nil), "ovm.MoravecRequest")
	proto.RegisterType((*KlausRequest)(nil), "ovm.KlausRequest")
	proto.RegisterType((*ZemanRequest)(nil), "ovm.ZemanRequest")
	proto.RegisterType((*Response)(nil), "ovm.Response")
	proto.RegisterType((*Sentence)(nil), "ovm.Sentence")
}

func init() {
	proto.RegisterFile("ovm.proto", fileDescriptor_b9e0de0875e5918e)
}

var fileDescriptor_b9e0de0875e5918e = []byte{
	// 426 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x6f, 0xd3, 0x30,
	0x14, 0xc6, 0x9b, 0x26, 0xe9, 0xda, 0x57, 0x36, 0x99, 0xb7, 0x09, 0xaa, 0x49, 0xa0, 0x2a, 0xa7,
	0xa9, 0x88, 0xc1, 0x8a, 0x90, 0xb8, 0xa6, 0xcc, 0x6b, 0x4d, 0xd7, 0x44, 0x72, 0xa2, 0x1d, 0x76,
	0xa9, 0xb2, 0xcc, 0x07, 0x44, 0x13, 0x97, 0x38, 0x8b, 0x60, 0x7f, 0x16, 0x7f, 0x21, 0xb2, 0x9d,
	0x89, 0xa2, 0x5d, 0x7a, 0x7b, 0xf9, 0x3e, 0x7f, 0x2f, 0xd6, 0xe7, 0x1f, 0x0c, 0x64, 0x53, 0x9c,
	0x6f, 0x2b, 0x59, 0x4b, 0x74, 0x65, 0x53, 0x04, 0x1f, 0xe0, 0x68, 0x25, 0xab, 0xac, 0x11, 0x39,
	0x17, 0x3f, 0x1f, 0x84, 0xaa, 0xf1, 0x0d, 0x78, 0x85, 0x94, 0xf7, 0x23, 0x67, 0xec, 0x9c, 0x1d,
	0x4d, 0x07, 0xe7, 0x3a, 0xb0, 0x92, 0xf2, 0x9e, 0x1b, 0x39, 0x88, 0xe1, 0xc5, 0x72, 0x93, 0x3d,
	0xa8, 0xfd, 0x8e, 0xe3, 0x18, 0x7c, 0xb5, 0x95, 0x55, 0x3d, 0xea, 0x1a, 0x1f, 0x8c, 0x9f, 0x68,
	0x85, 0x5b, 0x43, 0x2f, 0xbc, 0x15, 0x45, 0x56, 0xee, 0xbf, 0xf0, 0x4e, 0xca, 0x47, 0xf1, 0xdf,
	0xc2, 0x99, 0x56, 0xb8, 0x35, 0x82, 0x15, 0xf4, 0xb9, 0x50, 0x5b, 0x59, 0x2a, 0x81, 0xef, 0x60,
	0xa0, 0x44, 0x59, 0x8b, 0x32, 0x17, 0x6a, 0xe4, 0x8c, 0xdd, 0xb3, 0xe1, 0xf4, 0xd0, 0x5e, 0xa1,
	0x55, 0xf9, 0x3f, 0x1f, 0x4f, 0xc0, 0x57, 0xb9, 0xac, 0xec, 0x6a, 0x9f, 0xdb, 0x8f, 0xe0, 0x2d,
	0xf4, 0x9f, 0x0e, 0x23, 0x82, 0x57, 0x8b, 0x5f, 0xb5, 0xb9, 0xdb, 0x80, 0x9b, 0x79, 0xf2, 0x05,
	0x7c, 0xf3, 0x7b, 0x04, 0xe8, 0xcd, 0xe8, 0xd7, 0x05, 0xe5, 0xa4, 0xa3, 0xe7, 0x2b, 0xca, 0x23,
	0x9a, 0x12, 0x07, 0x87, 0x70, 0xf0, 0x8d, 0x5e, 0xb3, 0x88, 0x2e, 0x49, 0x57, 0x1b, 0x37, 0x8c,
	0xc7, 0xb7, 0x21, 0x71, 0x27, 0xef, 0xc1, 0x37, 0x4d, 0x68, 0x31, 0xa5, 0x51, 0xc4, 0x12, 0xd2,
	0xc1, 0x03, 0x70, 0x93, 0x25, 0x23, 0x0e, 0xf6, 0xa0, 0x7b, 0x75, 0x41, 0xba, 0x5a, 0xa0, 0xf3,
	0x98, 0xb8, 0x93, 0x08, 0x3c, 0xdd, 0x03, 0xf6, 0xc1, 0x9b, 0xc7, 0xf1, 0x25, 0xe9, 0xe0, 0x29,
	0xbc, 0x8a, 0xe2, 0x74, 0x3d, 0xe7, 0x34, 0x4c, 0xd7, 0x7a, 0x4a, 0x29, 0xe7, 0x6c, 0x76, 0x4d,
	0x6d, 0x6c, 0x16, 0x5e, 0x12, 0x17, 0x5f, 0xc3, 0xb1, 0xb1, 0x16, 0x2c, 0x59, 0x27, 0x0b, 0x96,
	0xae, 0xc3, 0x79, 0xc8, 0x22, 0xe2, 0x4d, 0xff, 0x38, 0x70, 0x12, 0xd7, 0xd9, 0xe3, 0x8f, 0xdf,
	0x37, 0x59, 0xbe, 0xc9, 0x9a, 0xcc, 0x80, 0x90, 0x0b, 0xfc, 0x0c, 0x87, 0x56, 0x69, 0xc9, 0xc0,
	0xe3, 0xf6, 0x11, 0x76, 0x39, 0x39, 0xb5, 0x3d, 0x3e, 0x35, 0x1d, 0x74, 0xf0, 0x02, 0x86, 0x36,
	0x66, 0xf8, 0xc0, 0x97, 0xc6, 0xdf, 0x65, 0xe5, 0x79, 0xe4, 0x23, 0xc0, 0xea, 0xfb, 0x46, 0x2a,
	0x03, 0x40, 0x9b, 0xd8, 0x85, 0xe1, 0x59, 0xe2, 0xae, 0x67, 0xd8, 0xfd, 0xf4, 0x37, 0x00, 0x00,
	0xff, 0xff, 0xe9, 0x84, 0xf0, 0x4c, 0xc8, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OtazkyVaclavaMoravceClient is the client API for OtazkyVaclavaMoravce service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OtazkyVaclavaMoravceClient interface {
	VaclavMoravec(ctx context.Context, in *MoravecRequest, opts ...grpc.CallOption) (*Response, error)
	VaclavKlaus(ctx context.Context, in *KlausRequest, opts ...grpc.CallOption) (*Response, error)
	MilosZeman(ctx context.Context, in *ZemanRequest, opts ...grpc.CallOption) (*Response, error)
}

type otazkyVaclavaMoravceClient struct {
	cc grpc.ClientConnInterface
}

func NewOtazkyVaclavaMoravceClient(cc grpc.ClientConnInterface) OtazkyVaclavaMoravceClient {
	return &otazkyVaclavaMoravceClient{cc}
}

func (c *otazkyVaclavaMoravceClient) VaclavMoravec(ctx context.Context, in *MoravecRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ovm.OtazkyVaclavaMoravce/VaclavMoravec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otazkyVaclavaMoravceClient) VaclavKlaus(ctx context.Context, in *KlausRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ovm.OtazkyVaclavaMoravce/VaclavKlaus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *otazkyVaclavaMoravceClient) MilosZeman(ctx context.Context, in *ZemanRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ovm.OtazkyVaclavaMoravce/MilosZeman", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OtazkyVaclavaMoravceServer is the server API for OtazkyVaclavaMoravce service.
type OtazkyVaclavaMoravceServer interface {
	VaclavMoravec(context.Context, *MoravecRequest) (*Response, error)
	VaclavKlaus(context.Context, *KlausRequest) (*Response, error)
	MilosZeman(context.Context, *ZemanRequest) (*Response, error)
}

// UnimplementedOtazkyVaclavaMoravceServer can be embedded to have forward compatible implementations.
type UnimplementedOtazkyVaclavaMoravceServer struct {
}

func (*UnimplementedOtazkyVaclavaMoravceServer) VaclavMoravec(ctx context.Context, req *MoravecRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaclavMoravec not implemented")
}
func (*UnimplementedOtazkyVaclavaMoravceServer) VaclavKlaus(ctx context.Context, req *KlausRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VaclavKlaus not implemented")
}
func (*UnimplementedOtazkyVaclavaMoravceServer) MilosZeman(ctx context.Context, req *ZemanRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MilosZeman not implemented")
}

func RegisterOtazkyVaclavaMoravceServer(s *grpc.Server, srv OtazkyVaclavaMoravceServer) {
	s.RegisterService(&_OtazkyVaclavaMoravce_serviceDesc, srv)
}

func _OtazkyVaclavaMoravce_VaclavMoravec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoravecRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtazkyVaclavaMoravceServer).VaclavMoravec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ovm.OtazkyVaclavaMoravce/VaclavMoravec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtazkyVaclavaMoravceServer).VaclavMoravec(ctx, req.(*MoravecRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtazkyVaclavaMoravce_VaclavKlaus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KlausRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtazkyVaclavaMoravceServer).VaclavKlaus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ovm.OtazkyVaclavaMoravce/VaclavKlaus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtazkyVaclavaMoravceServer).VaclavKlaus(ctx, req.(*KlausRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OtazkyVaclavaMoravce_MilosZeman_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZemanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OtazkyVaclavaMoravceServer).MilosZeman(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ovm.OtazkyVaclavaMoravce/MilosZeman",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OtazkyVaclavaMoravceServer).MilosZeman(ctx, req.(*ZemanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _OtazkyVaclavaMoravce_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ovm.OtazkyVaclavaMoravce",
	HandlerType: (*OtazkyVaclavaMoravceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VaclavMoravec",
			Handler:    _OtazkyVaclavaMoravce_VaclavMoravec_Handler,
		},
		{
			MethodName: "VaclavKlaus",
			Handler:    _OtazkyVaclavaMoravce_VaclavKlaus_Handler,
		},
		{
			MethodName: "MilosZeman",
			Handler:    _OtazkyVaclavaMoravce_MilosZeman_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ovm.proto",
}
